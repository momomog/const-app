{"version":3,"sources":["components/Header/Header.module.css","reducers/appReducer.ts","components/Header/Header.tsx","components/core/Loader.tsx","components/App.tsx","components/AppWrapper.tsx","components/core/Loader.module.css","serviceWorker.ts","index.tsx"],"names":["module","exports","Actions","initialState","enterTime","location","appReducer","state","action","type","SET_ENTER_TIME","Date","now","Header","className","style","nav","to","activeClassName","active","Loader","size","styles","wrapper","CircularProgress","About","React","lazy","Location","EnterTime","App","fallback","exact","path","component","AppContext","createContext","AppWrapper","useReducer","dispatch","useEffect","Provider","value","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kHACAA,EAAOC,QAAU,CAAC,IAAM,oBAAoB,OAAS,yB,sECDhDC,E,0CAAAA,K,iCAAAA,M,KAcE,IAGMC,EAAyB,CAClCC,UAAW,EACXC,SAAU,CAAC,OAAQ,OAGVC,EAAa,SAACC,EAAiBC,GACxC,OAAIA,EAAOC,OAASP,EAAQQ,eACjB,2BACAH,GADP,IAEIH,UAAWO,KAAKC,QAGjBL,G,gCCTIM,EAhBO,WAClB,OACI,yBAAKC,UAAWC,IAAMC,KAClB,kBAAC,IAAD,CAASC,GAAG,SAASC,gBAAiBH,IAAMI,QAA5C,mCAGA,kBAAC,IAAD,CAASF,GAAG,YAAYC,gBAAiBH,IAAMI,QAA/C,kCAGA,kBAAC,IAAD,CAASF,GAAG,cAAcC,gBAAiBH,IAAMI,QAAjD,0C,yBCKGC,EATiB,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAE9B,OACI,yBAAKP,UAAWQ,IAAOC,SACnB,kBAACC,EAAA,EAAD,CAAkBH,KAAMA,MCP9BI,EAAQC,IAAMC,MAAK,kBAAM,sDACzBC,EAAWF,IAAMC,MAAK,kBAAM,sDAC5BE,EAAYH,IAAMC,MAAK,kBAAM,iCAkBpBG,MAhBf,WACI,OACI,oCACI,kBAAC,EAAD,MACA,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,CAAQV,KAAM,MAC9B,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAM,CAAC,IAAK,UAAWC,UAAWT,IAC/C,kBAAC,IAAD,CAAOQ,KAAK,YAAYC,UAAWN,IACnC,kBAAC,IAAD,CAAOK,KAAK,cAAcC,UAAWL,IACrC,kBAAC,IAAD,CAAOI,KAAK,IAAIC,UAAWT,QCdlCU,EAAsCT,IAAMU,cAAcjC,GAkBxDkC,IAhBI,WAAO,IAAD,EACKC,qBAAWhC,EAAYH,GAD5B,mBACdI,EADc,KACPgC,EADO,KAOrB,OAJAC,qBAAU,WACND,EJGyC,CAAC9B,KAAMP,EAAQQ,mBIFzD,IAGC,kBAACyB,EAAWM,SAAZ,CAAqBC,MAAOnC,GACxB,kBAAC,IAAD,KACI,kBAAC,EAAD,U,mBChBhBP,EAAOC,QAAU,CAAC,QAAU,0B,gHCWR0C,QACW,cAA7BC,OAAOvC,SAASwC,UAEe,UAA7BD,OAAOvC,SAASwC,UAEhBD,OAAOvC,SAASwC,SAASC,MACvB,2D,YCbNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAACZ,EAAA,EAAD,OAEJa,SAASC,eAAe,SDkItB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e6ae31df.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Header_nav__1MOp6\",\"active\":\"Header_active__19ImZ\"};","enum Actions {\r\n    SET_ENTER_TIME = 'SET_ENTER_TIME'\r\n}\r\n\r\nexport interface AppState {\r\n    enterTime: number\r\n    location: Array<number>\r\n}\r\n\r\nexport interface Action {\r\n    type: Actions\r\n    payload?: any\r\n}\r\n\r\nexport const setEnterTimeAction = (): Action => ({type: Actions.SET_ENTER_TIME})\r\n\r\n\r\nexport const initialState: AppState = {\r\n    enterTime: 0,\r\n    location: [54.305, 48.40]\r\n}\r\n\r\nexport const appReducer = (state: AppState, action: Action): AppState => {\r\n    if (action.type === Actions.SET_ENTER_TIME) {\r\n        return {\r\n            ...state,\r\n            enterTime: Date.now()\r\n        }\r\n    }\r\n    return state\r\n}","import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport style from './Header.module.css'\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <nav className={style.nav}>\r\n            <NavLink to='/about' activeClassName={style.active}>\r\n                О себе\r\n            </NavLink>\r\n            <NavLink to='/location' activeClassName={style.active}>\r\n                Карта\r\n            </NavLink>\r\n            <NavLink to='/enter-time' activeClassName={style.active}>\r\n                Таймер\r\n            </NavLink>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport {CircularProgress} from \"@material-ui/core\";\r\n\r\nimport styles from './Loader.module.css'\r\n\r\ninterface Props {\r\n    size: number\r\n}\r\n\r\nconst Loader: React.FC<Props> = ({size}) => {\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <CircularProgress size={size}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader","import React, {Suspense} from 'react'\nimport {Route, Switch} from 'react-router-dom'\n\nimport Header from './Header/Header'\nimport Loader from \"./core/Loader\";\n\nconst About = React.lazy(() => import('./pages/About/About'))\nconst Location = React.lazy(() => import('./pages/Location/Location'))\nconst EnterTime = React.lazy(() => import('./pages/EnterTime/EnterTime'))\n\nfunction App() {\n    return (\n        <>\n            <Header/>\n            <Suspense fallback={<Loader size={75}/>}>\n                <Switch>\n                    <Route exact path={['/', '/about']} component={About}/>\n                    <Route path='/location' component={Location}/>\n                    <Route path='/enter-time' component={EnterTime}/>\n                    <Route path='*' component={About}/>\n                </Switch>\n            </Suspense>\n        </>\n    )\n}\n\nexport default App\n","import React, {useEffect, useReducer} from 'react'\r\nimport {appReducer, AppState, initialState, setEnterTimeAction} from \"../reducers/appReducer\"\r\nimport App from './App'\r\nimport {BrowserRouter, HashRouter} from 'react-router-dom'\r\n\r\nexport const AppContext: React.Context<AppState> = React.createContext(initialState)\r\n\r\nconst AppWrapper = () => {\r\n    const [state, dispatch] = useReducer(appReducer, initialState)\r\n\r\n    useEffect(() => {\r\n        dispatch(setEnterTimeAction())\r\n    }, [])\r\n\r\n    return (\r\n        <AppContext.Provider value={state}>\r\n            <HashRouter>\r\n                <App/>\r\n            </HashRouter>\r\n        </AppContext.Provider>\r\n    )\r\n}\r\n\r\nexport default AppWrapper\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Loader_wrapper__2IpsZ\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\nimport AppWrapper from './components/AppWrapper'\n\nReactDOM.render(\n    <React.StrictMode>\n        <AppWrapper/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}