{"version":3,"sources":["components/Header/Header.module.css","reducers/appReducer.ts","components/Header/Header.tsx","components/App.tsx","components/AppWrapper.tsx","components/core/Loader.tsx","components/core/Loader.module.css","components/App.module.css","serviceWorker.ts","index.tsx"],"names":["module","exports","Actions","initialState","enterTime","location","appReducer","state","action","type","SET_ENTER_TIME","Date","now","Header","className","style","nav","to","activeClassName","active","About","React","lazy","Location","EnterTime","App","styles","wrapper","fallback","Loader","size","exact","path","component","AppContext","createContext","AppWrapper","useReducer","dispatch","useEffect","Provider","value","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kHACAA,EAAOC,QAAU,CAAC,IAAM,oBAAoB,OAAS,yB,sECDhDC,E,0CAAAA,K,iCAAAA,M,KAcE,IAGMC,EAAyB,CAClCC,UAAW,EACXC,SAAU,CAAC,OAAQ,OAGVC,EAAa,SAACC,EAAiBC,GACxC,OAAIA,EAAOC,OAASP,EAAQQ,eACjB,2BACAH,GADP,IAEIH,UAAWO,KAAKC,QAGjBL,G,gCCNIM,EAhBO,WAClB,OACI,yBAAKC,UAAWC,IAAMC,KAClB,kBAAC,IAAD,CAASC,GAAG,SAASC,gBAAiBH,IAAMI,QAA5C,mCAGA,kBAAC,IAAD,CAASF,GAAG,YAAYC,gBAAiBH,IAAMI,QAA/C,kCAGA,kBAAC,IAAD,CAASF,GAAG,cAAcC,gBAAiBH,IAAMI,QAAjD,0C,yBCTNC,EAAQC,IAAMC,MAAK,kBAAM,uDACzBC,EAAWF,IAAMC,MAAK,kBAAM,uDAC5BE,EAAYH,IAAMC,MAAK,kBAAM,uDAwBpBG,MAlBf,WACI,OACI,oCACI,kBAAC,EAAD,MACA,yBAAKX,UAAWY,IAAOC,SACnB,kBAAC,WAAD,CAAUC,SAAU,kBAACC,EAAA,EAAD,CAAQC,KAAM,MAC9B,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,CAAC,IAAK,UAAWC,UAAWb,IAC/C,kBAAC,IAAD,CAAOY,KAAK,YAAYC,UAAWV,IACnC,kBAAC,IAAD,CAAOS,KAAK,cAAcC,UAAWT,IACrC,kBAAC,IAAD,CAAOQ,KAAK,IAAIC,UAAWb,SCnBtCc,EAAsCb,IAAMc,cAAchC,GAqBxDiC,IAhBI,WAAO,IAAD,EACKC,qBAAW/B,EAAYH,GAD5B,mBACdI,EADc,KACP+B,EADO,KAOrB,OAJAC,qBAAU,WACND,EHDyC,CAAC7B,KAAMP,EAAQQ,mBGEzD,IAGC,kBAACwB,EAAWM,SAAZ,CAAqBC,MAAOlC,GACxB,kBAAC,IAAD,KACI,kBAAC,EAAD,U,gCCrBhB,6CAmBesB,IARiB,SAAC,GAAiB,IAAD,IAAfC,YAAe,MAAR,GAAQ,EAC7C,OACI,yBAAKhB,UAAWY,IAAOC,SACnB,kBAAC,IAAD,CAAkBG,KAAMA,O,mBCbpC9B,EAAOC,QAAU,CAAC,QAAU,0B,mBCA5BD,EAAOC,QAAU,CAAC,QAAU,uB,gHCWRyC,QACW,cAA7BC,OAAOtC,SAASuC,UAEe,UAA7BD,OAAOtC,SAASuC,UAEhBD,OAAOtC,SAASuC,SAASC,MACvB,2D,YCbNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAACZ,EAAA,EAAD,OAEJa,SAASC,eAAe,SDkItB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2a18bc69.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Header_nav__3ADfl\",\"active\":\"Header_active__1CUaQ\"};","enum Actions {\r\n    SET_ENTER_TIME = 'SET_ENTER_TIME'\r\n}\r\n\r\nexport interface AppState {\r\n    enterTime: number           // Время входа на сайт (ms)\r\n    location: Array<number>     // координаты г. Ульяновск\r\n}\r\n\r\nexport interface Action {\r\n    type: Actions\r\n    payload?: any\r\n}\r\n\r\nexport const setEnterTimeAction = (): Action => ({type: Actions.SET_ENTER_TIME})\r\n\r\n\r\nexport const initialState: AppState = {\r\n    enterTime: 0,\r\n    location: [54.305, 48.40]\r\n}\r\n\r\nexport const appReducer = (state: AppState, action: Action): AppState => {\r\n    if (action.type === Actions.SET_ENTER_TIME) {\r\n        return {\r\n            ...state,\r\n            enterTime: Date.now()\r\n        }\r\n    }\r\n    return state\r\n}","import React from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport style from './Header.module.css'\r\n\r\n/*\r\n * Шапка сайта\r\n */\r\nexport const Header = () => {\r\n    return (\r\n        <nav className={style.nav}>\r\n            <NavLink to='/about' activeClassName={style.active}>\r\n                О себе\r\n            </NavLink>\r\n            <NavLink to='/location' activeClassName={style.active}>\r\n                Карта\r\n            </NavLink>\r\n            <NavLink to='/enter-time' activeClassName={style.active}>\r\n                Таймер\r\n            </NavLink>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header","import React, {Suspense} from 'react'\r\nimport {Route, Switch} from 'react-router-dom'\r\n\r\nimport Header from './Header/Header'\r\nimport Loader from './core/Loader'\r\nimport styles from './App.module.css'\r\n\r\nconst About = React.lazy(() => import('./pages/About/About'))\r\nconst Location = React.lazy(() => import('./pages/Location/Location'))\r\nconst EnterTime = React.lazy(() => import('./pages/EnterTime/EnterTime'))\r\n\r\n\r\n/*\r\n * Главный компонент приложения\r\n */\r\nfunction App() {\r\n    return (\r\n        <>\r\n            <Header/>\r\n            <div className={styles.wrapper}>\r\n                <Suspense fallback={<Loader size={75}/>}>\r\n                    <Switch>\r\n                        <Route exact path={['/', '/about']} component={About}/>\r\n                        <Route path='/location' component={Location}/>\r\n                        <Route path='/enter-time' component={EnterTime}/>\r\n                        <Route path='*' component={About}/>\r\n                    </Switch>\r\n                </Suspense>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React, {useEffect, useReducer} from 'react'\r\nimport {appReducer, AppState, initialState, setEnterTimeAction} from \"../reducers/appReducer\"\r\nimport App from './App'\r\nimport {HashRouter} from 'react-router-dom'\r\n\r\n// Контекст приложения. Содержит информацию о дате входа в приложение и координаты города\r\nexport const AppContext: React.Context<AppState> = React.createContext(initialState)\r\n\r\n/*\r\n * Главный компонент приложения. Оболочка\r\n */\r\nconst AppWrapper = () => {\r\n    const [state, dispatch] = useReducer(appReducer, initialState)\r\n\r\n    useEffect(() => {\r\n        dispatch(setEnterTimeAction())\r\n    }, [])\r\n\r\n    return (\r\n        <AppContext.Provider value={state}>\r\n            <HashRouter>\r\n                <App/>\r\n            </HashRouter>\r\n        </AppContext.Provider>\r\n    )\r\n}\r\n\r\nexport default AppWrapper\r\n","import React from 'react'\r\nimport {CircularProgress} from '@material-ui/core'\r\nimport styles from './Loader.module.css'\r\n\r\ninterface Props {\r\n    size: number\r\n}\r\n\r\n/*\r\n * Индикатор загрузки\r\n */\r\nconst Loader: React.FC<Props> = ({size = 50}) => {\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <CircularProgress size={size}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Loader_wrapper__2uk3u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__1Ou1f\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport AppWrapper from './components/AppWrapper'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <AppWrapper/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}